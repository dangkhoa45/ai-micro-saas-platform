// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?        // For credentials auth
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  projects      Project[]
  usageLogs     UsageLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Stripe Subscription model
model Subscription {
  id                 String   @id @default(cuid())
  userId             String
  stripeCustomerId   String   @unique
  stripeSubscriptionId String? @unique
  stripePriceId      String?
  stripeCurrentPeriodEnd DateTime?
  plan               String   @default("free") // free, starter, pro, business
  status             String   @default("active") // active, canceled, past_due
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Project/Workspace for organizing AI work
model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  appId       String   // Reference to which micro-SaaS app (ai-writer, ai-analytics, etc.)
  settings    Json?    // Flexible JSON for app-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  app       App        @relation(fields: [appId], references: [id])
  usageLogs UsageLog[]

  @@index([userId])
  @@index([appId])
}

// AI Usage tracking
model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  appId     String   // Which micro-SaaS app was used
  type      String   // "text_generation", "image_generation", "analysis", etc.
  model     String?  // GPT-4o, GPT-4, DALL-E, etc.
  tokens    Int      @default(0)
  cost      Float    @default(0.0)
  metadata  Json?    // Additional metadata (prompt length, response time, etc.)
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  app     App      @relation(fields: [appId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([appId])
  @@index([createdAt])
}

// Registry of available micro-SaaS apps
model App {
  id          String    @id @default(cuid())
  slug        String    @unique // ai-writer, ai-analytics, etc.
  name        String
  description String?
  icon        String?
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  projects  Project[]
  usageLogs UsageLog[]
}
